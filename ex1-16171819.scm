(define (exp base exponent)
	(define (even? x)
	  (= 0 (remainder x 2)))
  (define (exp-iter base exponent remain)
    (cond ((= 1 exponent) (* remain base))
          ((even? exponent) (exp-iter (square base) 
          (/ exponent 2) remain))
      		(else (exp-iter (square base) 
      		(/ (- exponent 1) 2) (* remain base)))))
(exp-iter base exponent 1))

(define (fast-multi-recur a b)
  (define (double a)
    (+ a a))
  (define (halve a)
    (/ a 2))
(cond ((= b 1) a)
      ((even? b) (fast-multi-recur (double a) (halve b)))
  	  (else (+ a (fast-multi-recur (double a) (halve (- b 1)))))))

(define (fast-multi a b)
  (define (double a)
    (+ a a))
  (define (halve a)
    (/ a 2))
  (define (fast-multi-iter a b remain)
    (cond ((= 1 b) (+ a remain))
          ((even? b) (fast-multi-iter (double a) (halve b) remain))
      	  (else (fast-multi-iter (double a) 
      	  (halve (- b 1)) (+ remain a)))))
(fast-multi-iter a b 0))

(define (fib n)
  (define (fib-iter a b p q count)
    (cond ((= count 0) b)
          ((even? count) (fib-iter a b (+ (square p) (square q))
           (+ (square q) (* 2 p q)) (/ count 2)))
          (else (fib-iter (+ (* b q) (* a q) (* a p))
                 (+ (* b p) (* a q)) p q (- count 1)))))
(fib-iter 1 0 0 1 n))